{"version":3,"sources":["common/CustomInput/CustomInput.module.css","common/CustomCheckbox/CustomCheckbox.module.css","common/CustomButton/CustomButton.module.css","common/Header/Header.module.css","common/CustomButton/CustomButton.tsx","common/CustomCheckbox/CustomCheckbox.tsx","common/CustomInput/CustomInput.tsx","pages/Test.tsx","pages/Login.tsx","pages/Profile.tsx","pages/SignUp.tsx","pages/RecoverPassword.tsx","pages/EditPassword.tsx","pages/Error.tsx","PagesRoutes.tsx","common/Header/Header.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","CustomButton","addStyle","className","restProps","finalClassName","s","custom","default","CustomCheckbox","onChange","onChangeChecked","children","spanClassName","finalInputClassName","checkbox2","checkbox","path","type","e","currentTarget","checked","viewBox","d","CustomInputText","onChangeText","onKeyPress","onEnter","error","errorInput","formRow","id","name","value","key","htmlFor","inputTextLabel","Test","useState","text","setText","trim","setChecked","disabled","onClick","alert","Login","Profile","SignUp","RecoverPassword","EditPassword","Error","PATH","PagesRoutes","element","Header","nav","to","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f33cf0de.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"formRow\":\"CustomInput_formRow__2T6Fi\",\"inputTextLabel\":\"CustomInput_inputTextLabel__P3ZNp\",\"default\":\"CustomInput_default__jc3tp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"CustomCheckbox_checkbox__1VKWI\",\"path\":\"CustomCheckbox_path__2f1--\",\"spanClassName\":\"CustomCheckbox_spanClassName__iwWvW\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"CustomButton_default__3nk3e\",\"custom\":\"CustomButton_custom__1s6hr\",\"rotate\":\"CustomButton_rotate__30W8s\",\"storm\":\"CustomButton_storm__3TgFn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Header_nav__2jtVF\"};","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react'\r\nimport s from './CustomButton.module.css'\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype CustomButtonPropsType = DefaultButtonPropsType & {\r\n    addStyle?: boolean\r\n}\r\n\r\nexport const CustomButton: React.FC<CustomButtonPropsType> = (\r\n    {\r\n        addStyle, className,\r\n        ...restProps\r\n    }\r\n    /*\r\n      все остальные пропсы попадут в объект restProps, там же будет children\r\n    */\r\n) => {\r\n    const finalClassName = `${addStyle ? s.custom : s.default} ${className}`\r\n\r\n    return (\r\n        <button className={finalClassName} {...restProps}/>\r\n)\r\n}\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './CustomCheckbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n\r\n//Omit исключает свойство из коллекции пропсов\r\ntype CustomCheckboxPropsType = Omit<DefaultInputPropsType, 'type'> & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nexport const CustomCheckbox: React.FC<CustomCheckboxPropsType> = (\r\n    {\r\n        //type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута, если Omit - строка не нужна вообще\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e)\r\n        // сделайте так чтоб работал onChange и onChangeChecked\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked)\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox2} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label className={`${s.checkbox} ${s.path}`}>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            <svg viewBox=\"0 0 21 21\">\r\n                <path\r\n                    d=\"M5,10.75 L8.5,14.25 L19.4,2.3 C18.8333333,1.43333333 18.0333333,1 17,1 L4,1 C2.35,1 1,2.35 1,4 L1,17 C1,18.65 2.35,20 4,20 L17,20 C18.65,20 20,18.65 20,17 L20,7.99769186\"> </path>\r\n            </svg>\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label>\r\n        // благодаря label нажатие на спан передастся в инпут*}  *\r\n    )\r\n}\r\n\r\n\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './CustomInput.module.css'\r\n\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype CustomInputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n\r\n}\r\nexport const CustomInputText:React.FC<CustomInputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalInputClassName = `${s.default} ${error? s.errorInput : s.default} ${className}`\r\n\r\n    return (\r\n        <div className={s.formRow}>\r\n\r\n            <input\r\n                //placeholder={'Type here...'}\r\n                type={'text'}\r\n                id={'name'}\r\n                name={'name'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            <label htmlFor={'name'} className={s.inputTextLabel}>Your name</label>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {CustomButton} from \"../common/CustomButton/CustomButton\";\r\nimport {CustomCheckbox} from \"../common/CustomCheckbox/CustomCheckbox\";\r\nimport {CustomInputText} from \"../common/CustomInput/CustomInput\";\r\n\r\nconst Test = () => {\r\n    const [text, setText] = useState<string>('')\r\n    const error = text.trim() ? '' : 'error'\r\n\r\n    const showAlert = () => {\r\n        if (error) {\r\n            alert('введите текст...')\r\n        } else {\r\n            alert(text) // если нет ошибки показать текст\r\n        }\r\n    }\r\n\r\n    const [checked, setChecked] = useState<boolean>(false)\r\n    const testOnChange = (e: ChangeEvent<HTMLInputElement>) => setChecked(e.currentTarget.checked)\r\n    return (\r\n        <>\r\n            <div>\r\n                <CustomButton>\r\n                    default\r\n                </CustomButton>\r\n                <CustomButton disabled>\r\n                    disabled\r\n                </CustomButton>\r\n                <CustomButton\r\n                    addStyle // пропсу с булевым значением не обязательно указывать true\r\n                    onClick={() => {\r\n                    }}\r\n                >\r\n                    {/*// название кнопки попадёт в children*/}\r\n                    <span>hover me</span>\r\n                </CustomButton>\r\n                <CustomButton\r\n                    addStyle\r\n                    disabled>\r\n                    <span>disabled</span>\r\n                </CustomButton>\r\n            </div>\r\n\r\n            <div>\r\n                <CustomCheckbox\r\n                    checked={checked}\r\n                    onChangeChecked={setChecked}\r\n                >\r\n                    some text {/*// этот текст попадёт в children*/}\r\n                </CustomCheckbox>\r\n                <CustomCheckbox\r\n                    checked={checked}\r\n                    onChange={testOnChange}>\r\n                    checkbox\r\n                </CustomCheckbox>\r\n            </div>\r\n\r\n            <div>\r\n                <CustomInputText\r\n                    value={text}\r\n                    onChangeText={setText}\r\n                    onEnter={showAlert}\r\n                    error={error}\r\n                />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Test;","import React from 'react';\r\n\r\nexport const Login:React.FC = () => {\r\n    return (\r\n        <div>\r\n            LOGIN\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nexport const Profile = () => {\r\n    return (\r\n        <div>\r\n            PROFILE\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nexport const SignUp = () => {\r\n    return (\r\n        <div>\r\n            SIGN UP\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\n\r\nexport const RecoverPassword = () => {\r\n    return (\r\n        <div>\r\n            RECOVER PASSWORD\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nexport const EditPassword = () => {\r\n    return (\r\n        <div>\r\n            Edit Password\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\n\r\nexport const Error = () => {\r\n    return (\r\n        <div>\r\n            404\r\n        </div>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {Route, Routes} from \"react-router-dom\";\r\nimport Test from \"./pages/Test\";\r\nimport {Login} from \"./pages/Login\";\r\nimport {Profile} from \"./pages/Profile\";\r\nimport {SignUp} from \"./pages/SignUp\";\r\nimport {RecoverPassword} from \"./pages/RecoverPassword\";\r\nimport {EditPassword} from \"./pages/EditPassword\";\r\nimport {Error} from \"./pages/Error\";\r\n\r\nexport const PATH = {\r\n    TEST: '/test',\r\n    LOGIN: '/login',\r\n    SIGN_UP: '/sign-up',\r\n    PROFILE: '/profile',\r\n    ERROR: '/404',\r\n    PASSWORD_RECOVER: '/recover-password',\r\n    PASSWORD_EDIT: '/edit-password',\r\n}\r\n\r\nexport const PagesRoutes = () => {\r\n    return (\r\n        <Routes>\r\n            {/*в начале мы попадаем на страницу '/' и переходим сразу на страницу PRE_JUNIOR*/}\r\n            {/*exact нужен чтоб указать полное совподение (что после '/' ничего не будет)*/}\r\n            <Route path={'/'} element={<Test/>}/>\r\n\r\n            <Route path={PATH.LOGIN} element={<Login/>}/>\r\n\r\n            <Route path={PATH.TEST} element={<Test/>}/>\r\n\r\n            <Route path={PATH.PROFILE} element={<Profile/>}/>\r\n\r\n            <Route path={PATH.SIGN_UP} element={<SignUp/>}/>\r\n\r\n            <Route path={PATH.PASSWORD_RECOVER} element={<RecoverPassword/>}/>\r\n\r\n            <Route path={PATH.PASSWORD_EDIT} element={<EditPassword/>}/>\r\n\r\n            {/*для демонстрации*/}\r\n            <Route path={PATH.ERROR} element={<Error/>}/>\r\n\r\n            {/*у этого роута нет пути, он отрисуется если пользователь захочет попасть на несуществующую страницу*/}\r\n            <Route path={'*'} element={<Error/>}/>\r\n\r\n        </Routes>\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport {PATH} from \"../../PagesRoutes\";\r\nimport {NavLink} from 'react-router-dom'\r\nimport s from './Header.module.css'\r\n\r\nexport const Header = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n\r\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\r\n\r\n            <NavLink to={PATH.TEST}>Test</NavLink>\r\n\r\n            <NavLink to={PATH.SIGN_UP}>Sign UP</NavLink>\r\n\r\n            <NavLink to={PATH.PROFILE}>Profile</NavLink>\r\n\r\n            <NavLink to={PATH.PASSWORD_EDIT}>Edit password</NavLink>\r\n\r\n            <NavLink to={PATH.PASSWORD_RECOVER}>Recover password</NavLink>\r\n\r\n            <NavLink to={PATH.ERROR}>Error-page</NavLink>\r\n        </nav>\r\n    );\r\n};\r\n\r\n","import React from 'react';\nimport './App.css';\nimport {PagesRoutes} from \"./PagesRoutes\";\nimport {Header} from \"./common/Header/Header\";\n\n\nexport const App = () => {\n    return (\n        <div>\n            <Header/>\n            <PagesRoutes/>\n        </div>\n    );\n}\n\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { HashRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n      <HashRouter>\n    <App />\n          </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}